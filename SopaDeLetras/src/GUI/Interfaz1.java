/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import Estructuras_de_datos.Buscadores;
import Estructuras_de_datos.ProcesadorArchivo;
import Estructuras_de_datos.GrafoMatriz;
import Estructuras_de_datos.ListaSimple;
import javax.swing.JLabel;
import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 * Interfaz gráfica para el juego de sopa de letras. Permite cargar archivos de texto,
 * mostrar el tablero de juego, buscar palabras y visualizar el diccionario de palabras.
 * 
 * @author Luis Peña
 * @author luismarianolovera
 * @author Diego Linares
 */
public class Interfaz1 extends javax.swing.JFrame {
    private JLabel[][] tablero; // Matriz de JLabels que simula el tablero gráfico.
    private ProcesadorArchivo procesador; // Procesador de archivos para cargar el tablero y diccionario.
    private GrafoMatriz grafo; // Grafo para representar relaciones entre letras.
    private Buscadores buscador; // Instancia de clase Buscadores para buscar palabras en el tablero.

    /**
     * Constructor principal. Inicializa los componentes de la interfaz,
     * configura el tablero gráfico y establece el método de búsqueda predeterminado (DFS).
     */
    public Interfaz1() {
        initComponents();
        procesador = new ProcesadorArchivo();
        buscador = new Buscadores();
        tablero = new JLabel[4][4];
        establecerBusqueda.setSelectedItem("DFS");
        
        // Mapeo de JLabels a la matriz tablero.
        tablero[0][0] = Jlabel00;
        tablero[0][1] = Jlabel01;
        tablero[0][2] = Jlabel02;
        tablero[0][3] = Jlabel03;
        tablero[1][0] = Jlabel10;
        tablero[1][1] = Jlabel11;
        tablero[1][2] = Jlabel12;
        tablero[1][3] = Jlabel13;
        tablero[2][0] = Jlabel20;
        tablero[2][1] = Jlabel21;
        tablero[2][2] = Jlabel22;
        tablero[2][3] = Jlabel23;
        tablero[3][0] = Jlabel30;
        tablero[3][1] = Jlabel31;
        tablero[3][2] = Jlabel32;
        tablero[3][3] = Jlabel33;
    }
    
    /**
     * Carga un archivo de texto seleccionado por el usuario y lo procesa para extraer
     * el tablero y el diccionario de palabras.
     * Muestra mensajes de error si el archivo no es válido o no se selecciona.
     */

    public boolean CargarArchivoTXT() {
        try{
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setFileFilter(new FileNameExtensionFilter("Archivos de texto (*.txt)", "txt"));

            int result = fileChooser.showOpenDialog(this);
            
            if (result == JFileChooser.APPROVE_OPTION) {
                File archivoSeleccionado = fileChooser.getSelectedFile();
      
            
                if (archivoSeleccionado==null){
                    JOptionPane.showMessageDialog(null, "No seleccionaste ningún archivo.","Error",JOptionPane.ERROR_MESSAGE);
                    return false;   
                }
             
                if (procesador.procesarArchivo(archivoSeleccionado)) {
                    JOptionPane.showMessageDialog(null, "Archivo cargado con éxito.");
                    return true;
                }
            }else{
                return false;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocurrió un error. Intenta de nuevo: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);    
            return false;
        }
        return false;
    }
       
    /**
     * Actualiza la interfaz gráfica para mostrar el tablero de letras cargado desde el archivo.
     * Las letras se toman del procesador y se asignan a los JLabels correspondientes.
     */
    public void MostrarTablero() {
        char[][] tableroLetras = procesador.getTableroLetras();
        for (int i = 0; i < tablero.length; i++) {
            for (int j = 0; j < tablero[i].length; j++) {
                tablero[i][j].setText(Character.toString(tableroLetras[i][j]));
            }
        }
    }
    
    /**
     * Muestra el diccionario de palabras cargado en el componente de texto designado.
     * Utiliza el método mostrarLista() del diccionario para obtener la representación en String.
     */
    public void MostrarDiccionario() {
        verDiccionario.setText(procesador.getDiccionario().mostrarLista());
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titulo = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        verDiccionario = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        cargar = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        busquedaGeneral = new javax.swing.JButton();
        establecerBusqueda = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        verPalabrasEncontradas = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        palabraIngresada = new javax.swing.JTextField();
        busquedaEspecifica = new javax.swing.JButton();
        guardarPalabraDiccionario = new javax.swing.JButton();
        reiniciar = new javax.swing.JButton();
        Jlabel03 = new javax.swing.JLabel();
        Jlabel00 = new javax.swing.JLabel();
        Jlabel01 = new javax.swing.JLabel();
        Jlabel02 = new javax.swing.JLabel();
        Jlabel13 = new javax.swing.JLabel();
        Jlabel10 = new javax.swing.JLabel();
        Jlabel11 = new javax.swing.JLabel();
        Jlabel12 = new javax.swing.JLabel();
        Jlabel23 = new javax.swing.JLabel();
        Jlabel20 = new javax.swing.JLabel();
        Jlabel21 = new javax.swing.JLabel();
        Jlabel22 = new javax.swing.JLabel();
        Jlabel33 = new javax.swing.JLabel();
        Jlabel30 = new javax.swing.JLabel();
        Jlabel31 = new javax.swing.JLabel();
        Jlabel32 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel7 = new javax.swing.JLabel();
        jSeparator8 = new javax.swing.JSeparator();
        jLabel8 = new javax.swing.JLabel();
        jSeparator5 = new javax.swing.JSeparator();
        jSeparator7 = new javax.swing.JSeparator();
        jSeparator6 = new javax.swing.JSeparator();
        jSeparator9 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(null);

        titulo.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        titulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titulo.setText("SOPA DE LETRAS");
        getContentPane().add(titulo);
        titulo.setBounds(420, 10, 220, 40);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 2, 16)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Presione el botón para cargar un diccionario y generar el tablero:");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(110, 60, 580, 40);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Diccionario");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(170, 120, 150, 20);

        verDiccionario.setColumns(20);
        verDiccionario.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        verDiccionario.setRows(5);
        jScrollPane1.setViewportView(verDiccionario);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(80, 150, 350, 230);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Tablero");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(760, 120, 80, 20);

        cargar.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cargar.setText("Cargar archivo");
        cargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cargarActionPerformed(evt);
            }
        });
        getContentPane().add(cargar);
        cargar.setBounds(680, 70, 160, 23);

        jLabel4.setFont(new java.awt.Font("Segoe UI", 2, 16)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Seleccione el método de búsqueda preferido y presione el botón para buscar palabras del diccionario");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(50, 400, 940, 30);

        busquedaGeneral.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        busquedaGeneral.setText("Búsqueda General");
        busquedaGeneral.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                busquedaGeneralActionPerformed(evt);
            }
        });
        getContentPane().add(busquedaGeneral);
        busquedaGeneral.setBounds(500, 430, 190, 30);

        establecerBusqueda.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        establecerBusqueda.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "BFS", "DFS" }));
        establecerBusqueda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                establecerBusquedaActionPerformed(evt);
            }
        });
        getContentPane().add(establecerBusqueda);
        establecerBusqueda.setBounds(400, 430, 90, 30);

        verPalabrasEncontradas.setColumns(20);
        verPalabrasEncontradas.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        verPalabrasEncontradas.setRows(5);
        jScrollPane2.setViewportView(verPalabrasEncontradas);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(60, 500, 410, 140);

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("El tiempo total de búsqueda fue de X segundos");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(490, 550, 500, 20);

        jLabel6.setFont(new java.awt.Font("Segoe UI", 2, 16)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Rellene el campo vacío con la palabra que desea buscar en el tablero:");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(50, 670, 950, 20);

        palabraIngresada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                palabraIngresadaActionPerformed(evt);
            }
        });
        getContentPane().add(palabraIngresada);
        palabraIngresada.setBounds(270, 700, 290, 40);

        busquedaEspecifica.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        busquedaEspecifica.setText("Búsqueda Específica");
        busquedaEspecifica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                busquedaEspecificaActionPerformed(evt);
            }
        });
        getContentPane().add(busquedaEspecifica);
        busquedaEspecifica.setBounds(570, 700, 180, 40);

        guardarPalabraDiccionario.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        guardarPalabraDiccionario.setText("Guardar Diccionario");
        guardarPalabraDiccionario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarPalabraDiccionarioActionPerformed(evt);
            }
        });
        getContentPane().add(guardarPalabraDiccionario);
        guardarPalabraDiccionario.setBounds(270, 800, 190, 30);

        reiniciar.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        reiniciar.setText("Reiniciar");
        reiniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reiniciarActionPerformed(evt);
            }
        });
        getContentPane().add(reiniciar);
        reiniciar.setBounds(590, 800, 180, 30);

        Jlabel03.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        Jlabel03.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Jlabel03.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 3, true));
        getContentPane().add(Jlabel03);
        Jlabel03.setBounds(900, 150, 80, 50);

        Jlabel00.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        Jlabel00.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Jlabel00.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 3, true));
        getContentPane().add(Jlabel00);
        Jlabel00.setBounds(630, 150, 80, 50);

        Jlabel01.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        Jlabel01.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Jlabel01.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 3, true));
        getContentPane().add(Jlabel01);
        Jlabel01.setBounds(720, 150, 80, 50);

        Jlabel02.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        Jlabel02.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Jlabel02.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 3, true));
        getContentPane().add(Jlabel02);
        Jlabel02.setBounds(810, 150, 80, 50);

        Jlabel13.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        Jlabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Jlabel13.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 3, true));
        getContentPane().add(Jlabel13);
        Jlabel13.setBounds(900, 210, 80, 50);

        Jlabel10.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        Jlabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Jlabel10.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 3, true));
        getContentPane().add(Jlabel10);
        Jlabel10.setBounds(630, 210, 80, 50);

        Jlabel11.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        Jlabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Jlabel11.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 3, true));
        getContentPane().add(Jlabel11);
        Jlabel11.setBounds(720, 210, 80, 50);

        Jlabel12.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        Jlabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Jlabel12.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 3, true));
        getContentPane().add(Jlabel12);
        Jlabel12.setBounds(810, 210, 80, 50);

        Jlabel23.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        Jlabel23.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Jlabel23.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 3, true));
        getContentPane().add(Jlabel23);
        Jlabel23.setBounds(900, 270, 80, 50);

        Jlabel20.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        Jlabel20.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Jlabel20.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 3, true));
        getContentPane().add(Jlabel20);
        Jlabel20.setBounds(630, 270, 80, 50);

        Jlabel21.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        Jlabel21.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Jlabel21.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 3, true));
        getContentPane().add(Jlabel21);
        Jlabel21.setBounds(720, 270, 80, 50);

        Jlabel22.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        Jlabel22.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Jlabel22.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 3, true));
        getContentPane().add(Jlabel22);
        Jlabel22.setBounds(810, 270, 80, 50);

        Jlabel33.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        Jlabel33.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Jlabel33.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 3, true));
        getContentPane().add(Jlabel33);
        Jlabel33.setBounds(900, 330, 80, 50);

        Jlabel30.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        Jlabel30.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Jlabel30.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 3, true));
        getContentPane().add(Jlabel30);
        Jlabel30.setBounds(630, 330, 80, 50);

        Jlabel31.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        Jlabel31.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Jlabel31.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 3, true));
        getContentPane().add(Jlabel31);
        Jlabel31.setBounds(720, 330, 80, 50);

        Jlabel32.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        Jlabel32.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Jlabel32.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 3, true));
        getContentPane().add(Jlabel32);
        Jlabel32.setBounds(810, 330, 80, 50);

        jSeparator2.setBackground(new java.awt.Color(204, 0, 0));
        jSeparator2.setForeground(new java.awt.Color(204, 0, 0));
        getContentPane().add(jSeparator2);
        jSeparator2.setBounds(40, 57, 950, 10);

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Otras opciones:");
        getContentPane().add(jLabel7);
        jLabel7.setBounds(50, 770, 950, 20);
        getContentPane().add(jSeparator8);
        jSeparator8.setBounds(80, 530, 350, 10);

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Palabras encontradas");
        getContentPane().add(jLabel8);
        jLabel8.setBounds(160, 470, 220, 20);

        jSeparator5.setBackground(new java.awt.Color(204, 0, 0));
        jSeparator5.setForeground(new java.awt.Color(204, 0, 0));
        getContentPane().add(jSeparator5);
        jSeparator5.setBounds(50, 660, 950, 10);

        jSeparator7.setBackground(new java.awt.Color(204, 0, 0));
        jSeparator7.setForeground(new java.awt.Color(204, 0, 0));
        getContentPane().add(jSeparator7);
        jSeparator7.setBounds(40, 103, 950, 10);

        jSeparator6.setBackground(new java.awt.Color(204, 0, 0));
        jSeparator6.setForeground(new java.awt.Color(204, 0, 0));
        getContentPane().add(jSeparator6);
        jSeparator6.setBounds(50, 390, 950, 10);

        jSeparator9.setBackground(new java.awt.Color(204, 0, 0));
        jSeparator9.setForeground(new java.awt.Color(204, 0, 0));
        getContentPane().add(jSeparator9);
        jSeparator9.setBounds(50, 760, 950, 10);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
    * Realiza una búsqueda general de todas las palabras del diccionario en el tablero,
    * utilizando el método seleccionado (BFS o DFS). Muestra los resultados y el tiempo de ejecución.
    * 
    * @param evt Evento de acción del botón.
    * @throws Exception Si no se ha cargado un archivo previamente o ocurre un error durante la búsqueda.
    */
    private void busquedaGeneralActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_busquedaGeneralActionPerformed
        try{
            if(tablero[0][0].getText().isEmpty()){
                throw new Exception("Primero carga un archivo para usar esta función.");
            }
            
            if(verDiccionario.getText().isEmpty()){
                JOptionPane.showMessageDialog(null, "No hay palabras en el diccionario.", "Error", JOptionPane.ERROR_MESSAGE);    
                return;
            }
            
            long empezarTiempo = System.currentTimeMillis(); // Inicia el cronómetro
            ListaSimple<String> palabrasEncontradas;
            String metodo = (String) establecerBusqueda.getSelectedItem();
            
            if(metodo.equals("BFS")){
                palabrasEncontradas = buscador.buscarTodasBFS(grafo, procesador.getDiccionario());      
            }else{
                palabrasEncontradas = buscador.buscarTodasDFS(grafo, procesador.getDiccionario());
            }

            if (palabrasEncontradas.esVacia()) { 
                verPalabrasEncontradas.setText("No se encontraron palabras del diccionario en el tablero.");
            } else {
                verPalabrasEncontradas.setText("Método: " + metodo + "\nPalabras encontradas:\n" + palabrasEncontradas.mostrarLista());
            }
            
            long terminarTiempo = System.currentTimeMillis(); // Finaliza el cronómetro
            long tiempo = terminarTiempo - empezarTiempo;
            jLabel5.setText("El tiempo total de búsqueda fue de " + tiempo + " milisegundos.");
            
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
        }
               
    }//GEN-LAST:event_busquedaGeneralActionPerformed
    
    /**
    * Método de evento para cambiar el método de búsqueda (BFS/DFS). 
    * Actualmente no implementa lógica adicional.
    * 
    * @param evt Evento de acción del comboBox.
    */
    private void establecerBusquedaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_establecerBusquedaActionPerformed
    }//GEN-LAST:event_establecerBusquedaActionPerformed
    
    /**
    * Método de evento para procesar la palabra ingresada por el usuario.
    * Actualmente no implementa lógica adicional.
    * 
    * @param evt Evento de acción del campo de texto.
    */
    private void palabraIngresadaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_palabraIngresadaActionPerformed
    }//GEN-LAST:event_palabraIngresadaActionPerformed
    
    /**
    * Reinicia el estado de la sopa de letras, limpiando el tablero, diccionario y resultados previos.
    * 
    * @param evt Evento de acción del botón.
    */
    private void reiniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reiniciarActionPerformed
        
        procesador.reiniciar();
        verDiccionario.setText("");
        verPalabrasEncontradas.setText("");
        palabraIngresada.setText("");
        jLabel5.setText("El tiempo de búsqueda fue de 'X' segundos.");
        
        for(int i=0; i < 4; i++){
            for(int j=0; j < 4; j++){
                tablero[i][j].setText("");
            }
        }
        
        JOptionPane.showMessageDialog(null, "Sopa de letra reiniciada exitosamente.");
    }//GEN-LAST:event_reiniciarActionPerformed
    
    /**
    * Busca una palabra específica en el tablero usando BFS, muestra el camino encontrado
    * y actualiza el diccionario si la palabra es válida.
    * 
    * @param evt Evento de acción del botón.
    * @throws Exception Si no hay archivo cargado o la palabra no es válida.
    */
    private void busquedaEspecificaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_busquedaEspecificaActionPerformed
        try{
            String palabra = palabraIngresada.getText().toUpperCase().trim();
            
            if(tablero[0][0].getText().isEmpty()){
                JOptionPane.showMessageDialog(null, "No hay ningún archivo cargado", "Error", JOptionPane.ERROR_MESSAGE);  
                palabraIngresada.setText("");
            return;
        }

            if (procesador.validarPalabras(palabra, false)==false){
            return;
        }
            long empezarTiempo = System.currentTimeMillis(); // Inicia el cronómetro
            ListaSimple<Integer> camino = buscador.BFSConCamino(palabra, grafo);
 
            if (!camino.esVacia()) {
                if (!procesador.getDiccionario().contieneDato(palabra)) {
                    procesador.getDiccionario().insertarAlFinal(palabra);
                    MostrarDiccionario();
                }
                
                String textoActual = verPalabrasEncontradas.getText();
                if (!textoActual.contains(palabra)) {
                    if (!textoActual.isEmpty() && !textoActual.endsWith("\n")) {
                        textoActual += "\n";
                    }
                    verPalabrasEncontradas.setText(textoActual + palabra);
                }
                
                long terminarTiempo = System.currentTimeMillis(); // Finaliza el cronómetro
                JOptionPane.showMessageDialog(null, "La palabra fue encontrada.\nSe ha agregado al diccionario y a la lista de palabras encontradas.");
                VisualizadorArbolBFS visualizador = new VisualizadorArbolBFS();
                visualizador.mostrarArbolCompleto(grafo, camino);
                palabraIngresada.setText("");
                long tiempo = terminarTiempo - empezarTiempo;
                jLabel5.setText("El tiempo total de búsqueda fue de " + tiempo + " milisegundos.");
            }else {
                JOptionPane.showMessageDialog(null, "Palabra no encontrada");
                palabraIngresada.setText("");
        }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
        }
    }//GEN-LAST:event_busquedaEspecificaActionPerformed
    
    /**
    * Carga un archivo TXT, inicializa el grafo y muestra el tablero y diccionario.
    * 
    * @param evt Evento de acción del botón.
    * @throws Exception Si ya hay un archivo cargado o ocurre un error al procesar el archivo.
    */
    private void cargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cargarActionPerformed
        
        try{
            if(!tablero[0][0].getText().isEmpty()){
                throw new Exception("Presiona el botón reiniciar para cargar otro archivo TXT.");
            }
            
            boolean cargado=CargarArchivoTXT();
            if (cargado==false){
                return;
            }
            grafo = new GrafoMatriz(procesador.getTableroLetras()); //Recibe una matriz 4x4 de caracteres.
            grafo.construirGrafo();
            MostrarTablero();
            MostrarDiccionario();
        }catch (Exception e){
            JOptionPane.showMessageDialog(null, "Error:" + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }   
    }//GEN-LAST:event_cargarActionPerformed

    private void guardarPalabraDiccionarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarPalabraDiccionarioActionPerformed
        // TODO add your handling code here:
        try {
            JFileChooser file = new javax.swing.JFileChooser();
            file.showSaveDialog(this);
            File guarda=file.getSelectedFile();
            
            if (guarda !=null){
                if(!guarda.getName().toLowerCase().endsWith(".txt")) {
                    guarda = new File(guarda.getAbsolutePath() + ".txt");
                }

                procesador.guardarDiccionario(guarda);
            }
        } catch(Exception ex) {
            javax.swing.JOptionPane.showMessageDialog(null, "No se pudo guardar el archivo\n" + ex, "Advertencia", javax.swing.JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_guardarPalabraDiccionarioActionPerformed
 
    /**
     * @param args the command line arguments
     */
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interfaz1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interfaz1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interfaz1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interfaz1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interfaz1().setVisible(true);
            }
        });
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Jlabel00;
    private javax.swing.JLabel Jlabel01;
    private javax.swing.JLabel Jlabel02;
    private javax.swing.JLabel Jlabel03;
    private javax.swing.JLabel Jlabel10;
    private javax.swing.JLabel Jlabel11;
    private javax.swing.JLabel Jlabel12;
    private javax.swing.JLabel Jlabel13;
    private javax.swing.JLabel Jlabel20;
    private javax.swing.JLabel Jlabel21;
    private javax.swing.JLabel Jlabel22;
    private javax.swing.JLabel Jlabel23;
    private javax.swing.JLabel Jlabel30;
    private javax.swing.JLabel Jlabel31;
    private javax.swing.JLabel Jlabel32;
    private javax.swing.JLabel Jlabel33;
    private javax.swing.JButton busquedaEspecifica;
    private javax.swing.JButton busquedaGeneral;
    private javax.swing.JButton cargar;
    private javax.swing.JComboBox<String> establecerBusqueda;
    private javax.swing.JButton guardarPalabraDiccionario;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JSeparator jSeparator8;
    private javax.swing.JSeparator jSeparator9;
    private javax.swing.JTextField palabraIngresada;
    private javax.swing.JButton reiniciar;
    private javax.swing.JLabel titulo;
    private javax.swing.JTextArea verDiccionario;
    private javax.swing.JTextArea verPalabrasEncontradas;
    // End of variables declaration//GEN-END:variables
}

